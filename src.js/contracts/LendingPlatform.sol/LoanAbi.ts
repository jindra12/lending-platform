/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LoanAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptEarlyRepayment"
      | "defaultOnLoan"
      | "doPayment"
      | "finalize"
      | "getBorrower"
      | "getCoin"
      | "getCollateral"
      | "getCollateralCoin"
      | "getCollateralEth"
      | "getDefaultLimit"
      | "getInterval"
      | "getIsDefault"
      | "getIsEth"
      | "getLastPayment"
      | "getLender"
      | "getPaidEarly"
      | "getRemaining"
      | "getRequestPaidEarly"
      | "getRequestPaidEarlyAmount"
      | "getSinglePayment"
      | "rejectEarlyRepayment"
      | "requestEarlyRepaymentCoin"
      | "requestEarlyRepaymentEth"
      | "setCoin"
      | "setCoinCollateral"
      | "setEthCollateral"
      | "setIsEth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AcceptEarlyRepayment"
      | "DefaultOnLoan"
      | "DidPayment"
      | "FullyPaid"
      | "RejectEarlyRepayment"
      | "RequestEarlyRepayment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptEarlyRepayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOnLoan",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "doPayment", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsDefault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getIsEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaidEarly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestPaidEarly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestPaidEarlyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSinglePayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectEarlyRepayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEarlyRepaymentCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestEarlyRepaymentEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCoin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoinCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setIsEth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptEarlyRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOnLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doPayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIsEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaidEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestPaidEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestPaidEarlyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSinglePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectEarlyRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEarlyRepaymentCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEarlyRepaymentEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCoinCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIsEth", data: BytesLike): Result;
}

export namespace AcceptEarlyRepaymentEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultOnLoanEvent {
  export type InputTuple = [timestamp: BigNumberish, collateral: BigNumberish];
  export type OutputTuple = [timestamp: bigint, collateral: bigint];
  export interface OutputObject {
    timestamp: bigint;
    collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DidPaymentEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    amount: BigNumberish,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    timestamp: bigint,
    amount: bigint,
    remaining: bigint
  ];
  export interface OutputObject {
    timestamp: bigint;
    amount: bigint;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FullyPaidEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RejectEarlyRepaymentEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestEarlyRepaymentEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LoanAbi extends BaseContract {
  connect(runner?: ContractRunner | null): LoanAbi;
  waitForDeployment(): Promise<this>;

  interface: LoanAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptEarlyRepayment: TypedContractMethod<[], [void], "nonpayable">;

  defaultOnLoan: TypedContractMethod<[], [void], "nonpayable">;

  doPayment: TypedContractMethod<[], [void], "payable">;

  finalize: TypedContractMethod<[], [void], "nonpayable">;

  getBorrower: TypedContractMethod<[], [string], "view">;

  getCoin: TypedContractMethod<[], [string], "view">;

  getCollateral: TypedContractMethod<[], [bigint], "view">;

  getCollateralCoin: TypedContractMethod<[], [string], "view">;

  getCollateralEth: TypedContractMethod<[], [boolean], "view">;

  getDefaultLimit: TypedContractMethod<[], [bigint], "view">;

  getInterval: TypedContractMethod<[], [bigint], "view">;

  getIsDefault: TypedContractMethod<[], [boolean], "view">;

  getIsEth: TypedContractMethod<[], [boolean], "view">;

  getLastPayment: TypedContractMethod<[], [bigint], "view">;

  getLender: TypedContractMethod<[], [string], "view">;

  getPaidEarly: TypedContractMethod<[], [boolean], "view">;

  getRemaining: TypedContractMethod<[], [bigint], "view">;

  getRequestPaidEarly: TypedContractMethod<[], [boolean], "view">;

  getRequestPaidEarlyAmount: TypedContractMethod<[], [bigint], "view">;

  getSinglePayment: TypedContractMethod<[], [bigint], "view">;

  rejectEarlyRepayment: TypedContractMethod<[], [void], "nonpayable">;

  requestEarlyRepaymentCoin: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestEarlyRepaymentEth: TypedContractMethod<[], [void], "payable">;

  setCoin: TypedContractMethod<[coin: AddressLike], [void], "nonpayable">;

  setCoinCollateral: TypedContractMethod<
    [coin: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEthCollateral: TypedContractMethod<[], [void], "payable">;

  setIsEth: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptEarlyRepayment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultOnLoan"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doPayment"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBorrower"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollateralEth"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDefaultLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIsDefault"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getIsEth"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getLastPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPaidEarly"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequestPaidEarly"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRequestPaidEarlyAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSinglePayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rejectEarlyRepayment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestEarlyRepaymentCoin"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestEarlyRepaymentEth"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "setCoin"
  ): TypedContractMethod<[coin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCoinCollateral"
  ): TypedContractMethod<
    [coin: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEthCollateral"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "setIsEth"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AcceptEarlyRepayment"
  ): TypedContractEvent<
    AcceptEarlyRepaymentEvent.InputTuple,
    AcceptEarlyRepaymentEvent.OutputTuple,
    AcceptEarlyRepaymentEvent.OutputObject
  >;
  getEvent(
    key: "DefaultOnLoan"
  ): TypedContractEvent<
    DefaultOnLoanEvent.InputTuple,
    DefaultOnLoanEvent.OutputTuple,
    DefaultOnLoanEvent.OutputObject
  >;
  getEvent(
    key: "DidPayment"
  ): TypedContractEvent<
    DidPaymentEvent.InputTuple,
    DidPaymentEvent.OutputTuple,
    DidPaymentEvent.OutputObject
  >;
  getEvent(
    key: "FullyPaid"
  ): TypedContractEvent<
    FullyPaidEvent.InputTuple,
    FullyPaidEvent.OutputTuple,
    FullyPaidEvent.OutputObject
  >;
  getEvent(
    key: "RejectEarlyRepayment"
  ): TypedContractEvent<
    RejectEarlyRepaymentEvent.InputTuple,
    RejectEarlyRepaymentEvent.OutputTuple,
    RejectEarlyRepaymentEvent.OutputObject
  >;
  getEvent(
    key: "RequestEarlyRepayment"
  ): TypedContractEvent<
    RequestEarlyRepaymentEvent.InputTuple,
    RequestEarlyRepaymentEvent.OutputTuple,
    RequestEarlyRepaymentEvent.OutputObject
  >;

  filters: {
    "AcceptEarlyRepayment(uint256)": TypedContractEvent<
      AcceptEarlyRepaymentEvent.InputTuple,
      AcceptEarlyRepaymentEvent.OutputTuple,
      AcceptEarlyRepaymentEvent.OutputObject
    >;
    AcceptEarlyRepayment: TypedContractEvent<
      AcceptEarlyRepaymentEvent.InputTuple,
      AcceptEarlyRepaymentEvent.OutputTuple,
      AcceptEarlyRepaymentEvent.OutputObject
    >;

    "DefaultOnLoan(uint256,uint256)": TypedContractEvent<
      DefaultOnLoanEvent.InputTuple,
      DefaultOnLoanEvent.OutputTuple,
      DefaultOnLoanEvent.OutputObject
    >;
    DefaultOnLoan: TypedContractEvent<
      DefaultOnLoanEvent.InputTuple,
      DefaultOnLoanEvent.OutputTuple,
      DefaultOnLoanEvent.OutputObject
    >;

    "DidPayment(uint256,uint256,uint256)": TypedContractEvent<
      DidPaymentEvent.InputTuple,
      DidPaymentEvent.OutputTuple,
      DidPaymentEvent.OutputObject
    >;
    DidPayment: TypedContractEvent<
      DidPaymentEvent.InputTuple,
      DidPaymentEvent.OutputTuple,
      DidPaymentEvent.OutputObject
    >;

    "FullyPaid()": TypedContractEvent<
      FullyPaidEvent.InputTuple,
      FullyPaidEvent.OutputTuple,
      FullyPaidEvent.OutputObject
    >;
    FullyPaid: TypedContractEvent<
      FullyPaidEvent.InputTuple,
      FullyPaidEvent.OutputTuple,
      FullyPaidEvent.OutputObject
    >;

    "RejectEarlyRepayment()": TypedContractEvent<
      RejectEarlyRepaymentEvent.InputTuple,
      RejectEarlyRepaymentEvent.OutputTuple,
      RejectEarlyRepaymentEvent.OutputObject
    >;
    RejectEarlyRepayment: TypedContractEvent<
      RejectEarlyRepaymentEvent.InputTuple,
      RejectEarlyRepaymentEvent.OutputTuple,
      RejectEarlyRepaymentEvent.OutputObject
    >;

    "RequestEarlyRepayment(uint256)": TypedContractEvent<
      RequestEarlyRepaymentEvent.InputTuple,
      RequestEarlyRepaymentEvent.OutputTuple,
      RequestEarlyRepaymentEvent.OutputObject
    >;
    RequestEarlyRepayment: TypedContractEvent<
      RequestEarlyRepaymentEvent.InputTuple,
      RequestEarlyRepaymentEvent.OutputTuple,
      RequestEarlyRepaymentEvent.OutputObject
    >;
  };
}
