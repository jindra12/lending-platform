/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LendingPlatFormStructs {
  export type CollateralStruct = {
    value: BigNumberish;
    isCollateralEth: boolean;
    collateralCoin: AddressLike;
  };

  export type CollateralStructOutput = [
    value: bigint,
    isCollateralEth: boolean,
    collateralCoin: string
  ] & { value: bigint; isCollateralEth: boolean; collateralCoin: string };

  export type LoanDataStruct = {
    amount: BigNumberish;
    toBePaid: BigNumberish;
    interval: BigNumberish;
    singlePayment: BigNumberish;
    defaultLimit: BigNumberish;
    collateral: LendingPlatFormStructs.CollateralStruct;
  };

  export type LoanDataStructOutput = [
    amount: bigint,
    toBePaid: bigint,
    interval: bigint,
    singlePayment: bigint,
    defaultLimit: bigint,
    collateral: LendingPlatFormStructs.CollateralStructOutput
  ] & {
    amount: bigint;
    toBePaid: bigint;
    interval: bigint;
    singlePayment: bigint;
    defaultLimit: bigint;
    collateral: LendingPlatFormStructs.CollateralStructOutput;
  };

  export type LoanOfferStruct = {
    coin: AddressLike;
    loanData: LendingPlatFormStructs.LoanDataStruct;
    from: AddressLike;
    id: BigNumberish;
    isEth: boolean;
  };

  export type LoanOfferStructOutput = [
    coin: string,
    loanData: LendingPlatFormStructs.LoanDataStructOutput,
    from: string,
    id: bigint,
    isEth: boolean
  ] & {
    coin: string;
    loanData: LendingPlatFormStructs.LoanDataStructOutput;
    from: string;
    id: bigint;
    isEth: boolean;
  };

  export type LoanOfferSearchStruct = {
    from: AddressLike;
    includeEth: boolean;
    coins: AddressLike[];
    amount: BigNumberish[];
    toBePaid: BigNumberish[];
    interval: BigNumberish[];
    singlePayment: BigNumberish[];
    defaultLimit: BigNumberish[];
    collateral: BigNumberish[];
    includeCollateralEth: boolean;
    collateralCoins: AddressLike[];
  };

  export type LoanOfferSearchStructOutput = [
    from: string,
    includeEth: boolean,
    coins: string[],
    amount: bigint[],
    toBePaid: bigint[],
    interval: bigint[],
    singlePayment: bigint[],
    defaultLimit: bigint[],
    collateral: bigint[],
    includeCollateralEth: boolean,
    collateralCoins: string[]
  ] & {
    from: string;
    includeEth: boolean;
    coins: string[];
    amount: bigint[];
    toBePaid: bigint[];
    interval: bigint[];
    singlePayment: bigint[];
    defaultLimit: bigint[];
    collateral: bigint[];
    includeCollateralEth: boolean;
    collateralCoins: string[];
  };
}

export interface LendingPlatformAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptLoan"
      | "getLoanFee"
      | "getLoanLimit(address)"
      | "getLoanLimit(address,address)"
      | "getLoanLimitRequest"
      | "getLoanOffersLength"
      | "listLoanOffers"
      | "listLoanOffersBy"
      | "offerLoanCoinCoin"
      | "offerLoanCoinEth"
      | "offerLoanEthCoin"
      | "offerLoanEthEth"
      | "owner"
      | "removeLoan"
      | "renounceOwnership"
      | "setLoanFee"
      | "setLoanLimit(address,uint256)"
      | "setLoanLimit(address,uint256,address)"
      | "setLoanLimitRequest"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AcceptedLoan"
      | "IncreaseCoinLoanLimit"
      | "IncreaseEthLoanLimit"
      | "IssuedLoan"
      | "OwnershipTransferred"
      | "RequestLoanLimit"
      | "SetLoanFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanLimit(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanLimit(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanLimitRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanOffersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listLoanOffers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listLoanOffersBy",
    values: [
      BigNumberish,
      BigNumberish,
      LendingPlatFormStructs.LoanOfferSearchStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerLoanCoinCoin",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerLoanCoinEth",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerLoanEthCoin",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerLoanEthEth",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanLimit(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanLimit(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanLimitRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "acceptLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLoanFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanLimit(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanLimit(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanLimitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanOffersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listLoanOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listLoanOffersBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerLoanCoinCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerLoanCoinEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerLoanEthCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerLoanEthEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLoanFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLoanLimit(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanLimit(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanLimitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AcceptedLoanEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    loan: AddressLike
  ];
  export type OutputTuple = [
    loanId: bigint,
    from: string,
    to: string,
    loan: string
  ];
  export interface OutputObject {
    loanId: bigint;
    from: string;
    to: string;
    loan: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseCoinLoanLimitEvent {
  export type InputTuple = [
    amount: BigNumberish,
    borrower: AddressLike,
    coinSymbol: string
  ];
  export type OutputTuple = [
    amount: bigint,
    borrower: string,
    coinSymbol: string
  ];
  export interface OutputObject {
    amount: bigint;
    borrower: string;
    coinSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseEthLoanLimitEvent {
  export type InputTuple = [amount: BigNumberish, borrower: AddressLike];
  export type OutputTuple = [amount: bigint, borrower: string];
  export interface OutputObject {
    amount: bigint;
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuedLoanEvent {
  export type InputTuple = [loanId: BigNumberish, from: AddressLike];
  export type OutputTuple = [loanId: bigint, from: string];
  export interface OutputObject {
    loanId: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestLoanLimitEvent {
  export type InputTuple = [borrower: AddressLike, requestIndex: BigNumberish];
  export type OutputTuple = [borrower: string, requestIndex: bigint];
  export interface OutputObject {
    borrower: string;
    requestIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLoanFeeEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPlatformAbi extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPlatformAbi;
  waitForDeployment(): Promise<this>;

  interface: LendingPlatformAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptLoan: TypedContractMethod<[id: BigNumberish], [string], "payable">;

  getLoanFee: TypedContractMethod<[], [bigint], "view">;

  "getLoanLimit(address)": TypedContractMethod<
    [to: AddressLike],
    [bigint],
    "view"
  >;

  "getLoanLimit(address,address)": TypedContractMethod<
    [to: AddressLike, coin: AddressLike],
    [bigint],
    "view"
  >;

  getLoanLimitRequest: TypedContractMethod<
    [borrower: AddressLike],
    [string],
    "view"
  >;

  getLoanOffersLength: TypedContractMethod<[], [bigint], "view">;

  listLoanOffers: TypedContractMethod<
    [from: BigNumberish, count: BigNumberish],
    [LendingPlatFormStructs.LoanOfferStructOutput[]],
    "view"
  >;

  listLoanOffersBy: TypedContractMethod<
    [
      from: BigNumberish,
      count: BigNumberish,
      search: LendingPlatFormStructs.LoanOfferSearchStruct
    ],
    [LendingPlatFormStructs.LoanOfferStructOutput[]],
    "view"
  >;

  offerLoanCoinCoin: TypedContractMethod<
    [
      amount: BigNumberish,
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish,
      coin: AddressLike,
      collateralCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  offerLoanCoinEth: TypedContractMethod<
    [
      amount: BigNumberish,
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish,
      coin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  offerLoanEthCoin: TypedContractMethod<
    [
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish,
      collateralCoin: AddressLike
    ],
    [void],
    "payable"
  >;

  offerLoanEthEth: TypedContractMethod<
    [
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish
    ],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeLoan: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setLoanFee: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  "setLoanLimit(address,uint256)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setLoanLimit(address,uint256,address)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, coin: AddressLike],
    [void],
    "nonpayable"
  >;

  setLoanLimitRequest: TypedContractMethod<
    [info: BytesLike],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptLoan"
  ): TypedContractMethod<[id: BigNumberish], [string], "payable">;
  getFunction(
    nameOrSignature: "getLoanFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLoanLimit(address)"
  ): TypedContractMethod<[to: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLoanLimit(address,address)"
  ): TypedContractMethod<
    [to: AddressLike, coin: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoanLimitRequest"
  ): TypedContractMethod<[borrower: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getLoanOffersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listLoanOffers"
  ): TypedContractMethod<
    [from: BigNumberish, count: BigNumberish],
    [LendingPlatFormStructs.LoanOfferStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "listLoanOffersBy"
  ): TypedContractMethod<
    [
      from: BigNumberish,
      count: BigNumberish,
      search: LendingPlatFormStructs.LoanOfferSearchStruct
    ],
    [LendingPlatFormStructs.LoanOfferStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "offerLoanCoinCoin"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish,
      coin: AddressLike,
      collateralCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "offerLoanCoinEth"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish,
      coin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "offerLoanEthCoin"
  ): TypedContractMethod<
    [
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish,
      collateralCoin: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "offerLoanEthEth"
  ): TypedContractMethod<
    [
      toBePaid: BigNumberish,
      interval: BigNumberish,
      defaultLimit: BigNumberish,
      singlePayment: BigNumberish,
      collateral: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLoan"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLoanFee"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLoanLimit(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLoanLimit(address,uint256,address)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, coin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLoanLimitRequest"
  ): TypedContractMethod<[info: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AcceptedLoan"
  ): TypedContractEvent<
    AcceptedLoanEvent.InputTuple,
    AcceptedLoanEvent.OutputTuple,
    AcceptedLoanEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseCoinLoanLimit"
  ): TypedContractEvent<
    IncreaseCoinLoanLimitEvent.InputTuple,
    IncreaseCoinLoanLimitEvent.OutputTuple,
    IncreaseCoinLoanLimitEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseEthLoanLimit"
  ): TypedContractEvent<
    IncreaseEthLoanLimitEvent.InputTuple,
    IncreaseEthLoanLimitEvent.OutputTuple,
    IncreaseEthLoanLimitEvent.OutputObject
  >;
  getEvent(
    key: "IssuedLoan"
  ): TypedContractEvent<
    IssuedLoanEvent.InputTuple,
    IssuedLoanEvent.OutputTuple,
    IssuedLoanEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestLoanLimit"
  ): TypedContractEvent<
    RequestLoanLimitEvent.InputTuple,
    RequestLoanLimitEvent.OutputTuple,
    RequestLoanLimitEvent.OutputObject
  >;
  getEvent(
    key: "SetLoanFee"
  ): TypedContractEvent<
    SetLoanFeeEvent.InputTuple,
    SetLoanFeeEvent.OutputTuple,
    SetLoanFeeEvent.OutputObject
  >;

  filters: {
    "AcceptedLoan(uint256,address,address,address)": TypedContractEvent<
      AcceptedLoanEvent.InputTuple,
      AcceptedLoanEvent.OutputTuple,
      AcceptedLoanEvent.OutputObject
    >;
    AcceptedLoan: TypedContractEvent<
      AcceptedLoanEvent.InputTuple,
      AcceptedLoanEvent.OutputTuple,
      AcceptedLoanEvent.OutputObject
    >;

    "IncreaseCoinLoanLimit(uint256,address,string)": TypedContractEvent<
      IncreaseCoinLoanLimitEvent.InputTuple,
      IncreaseCoinLoanLimitEvent.OutputTuple,
      IncreaseCoinLoanLimitEvent.OutputObject
    >;
    IncreaseCoinLoanLimit: TypedContractEvent<
      IncreaseCoinLoanLimitEvent.InputTuple,
      IncreaseCoinLoanLimitEvent.OutputTuple,
      IncreaseCoinLoanLimitEvent.OutputObject
    >;

    "IncreaseEthLoanLimit(uint256,address)": TypedContractEvent<
      IncreaseEthLoanLimitEvent.InputTuple,
      IncreaseEthLoanLimitEvent.OutputTuple,
      IncreaseEthLoanLimitEvent.OutputObject
    >;
    IncreaseEthLoanLimit: TypedContractEvent<
      IncreaseEthLoanLimitEvent.InputTuple,
      IncreaseEthLoanLimitEvent.OutputTuple,
      IncreaseEthLoanLimitEvent.OutputObject
    >;

    "IssuedLoan(uint256,address)": TypedContractEvent<
      IssuedLoanEvent.InputTuple,
      IssuedLoanEvent.OutputTuple,
      IssuedLoanEvent.OutputObject
    >;
    IssuedLoan: TypedContractEvent<
      IssuedLoanEvent.InputTuple,
      IssuedLoanEvent.OutputTuple,
      IssuedLoanEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestLoanLimit(address,uint256)": TypedContractEvent<
      RequestLoanLimitEvent.InputTuple,
      RequestLoanLimitEvent.OutputTuple,
      RequestLoanLimitEvent.OutputObject
    >;
    RequestLoanLimit: TypedContractEvent<
      RequestLoanLimitEvent.InputTuple,
      RequestLoanLimitEvent.OutputTuple,
      RequestLoanLimitEvent.OutputObject
    >;

    "SetLoanFee(uint256)": TypedContractEvent<
      SetLoanFeeEvent.InputTuple,
      SetLoanFeeEvent.OutputTuple,
      SetLoanFeeEvent.OutputObject
    >;
    SetLoanFee: TypedContractEvent<
      SetLoanFeeEvent.InputTuple,
      SetLoanFeeEvent.OutputTuple,
      SetLoanFeeEvent.OutputObject
    >;
  };
}
